<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CompositionOperation_SharingLockRequired" xml:space="preserve">
    <value>Sharing lock is required</value>
  </data>
  <data name="Dependency_ExportNotFound" xml:space="preserve">
    <value>No export was found for the contract '{0}'</value>
  </data>
  <data name="Dependency_QuoteParameter" xml:space="preserve">
    <value>'{0}'</value>
  </data>
  <data name="Dependency_TooManyExports" xml:space="preserve">
    <value>Only one export for the contract '{0}' is allowed, but the following parts: {1} export it.</value>
    <comment>Parameter {1} is a list of items</comment>
  </data>
  <data name="Dependency_ToStringFormat" xml:space="preserve">
    <value>'{0}' on contract '{1}' supplied by {2}</value>
  </data>
  <data name="ExportDescriptorNull" xml:space="preserve">
    <value>Export descriptor fulfillment function returned null.</value>
  </data>
  <data name="ExportDescriptor_ToStringFormat" xml:space="preserve">
    <value>{0} supplied by {1}</value>
  </data>
  <data name="Formatter_None" xml:space="preserve">
    <value>&lt;none&gt;</value>
  </data>
  <data name="Diagnostic_InternalExceptionMessage" xml:space="preserve">
    <value>Internal error occurred. Additional information: '{0}'.</value>
  </data>
  <data name="NotImplemented_MetadataCycles" xml:space="preserve">
    <value>Metadata value circularity not possible, use lazy initialization.</value>
  </data>
  <data name="CardinalityMismatch_TooManyExports" xml:space="preserve">
    <value>"Only one export for the contract '{0}' is allowed, multiple implementations were found."</value>
  </data>
  <data name="Diagnostic_ThrowingException" xml:space="preserve">
    <value>Exception Thrown: {0}\r\n</value>
  </data>
  <data name="ExportDescriptor_DependencyErrorContract" xml:space="preserve">
    <value> -&gt; required by initial request for contract '{0}'</value>
  </data>
  <data name="ExportDescriptor_DependencyErrorLine" xml:space="preserve">
    <value> -&gt; required by import '{0}' of part '{1}'</value>
  </data>
  <data name="ExportDescriptor_UnsupportedCycle" xml:space="preserve">
    <value>Detected an unsupported cycle for part '{0}'. To construct a valid cycle, at least one part in the cycle must be shared, and at least one import in the cycle must be non-prerequisite (e.g. a property).</value>
  </data>
  <data name="Component_NotCreatableOutsideSharingBoundary" xml:space="preserve">
    <value>The component (unknown) cannot be created outside the {0} sharing boundary.</value>
  </data>
  <data name="Keyword_MetadataViewProvider" xml:space="preserve">
    <value>Metadata View Provider</value>
  </data>
  <data name="MetadataViewProvider_InvalidViewImplementation" xml:space="preserve">
    <value>The type '{0}' cannot be used as a metadata view. A metadata view must be a concrete class with a parameterless or dictionary constructor.</value>
  </data>
  <data name="MetadataViewProvider_MissingMetadata" xml:space="preserve">
    <value>Export metadata for '{0}' is missing and no default value was supplied.</value>
  </data>
  <data name="Formatter_ListSeparatorWithSpace" xml:space="preserve">
    <value>, </value>
  </data>
  <data name="CompositionContextExtensions_MissingDependency" xml:space="preserve">
    <value>Missing dependency '{0}' on '{1}'.</value>
  </data>
  <data name="CompositionContext_NoExportFoundForContract" xml:space="preserve">
    <value>No export was found for the contract '{0}'.</value>
  </data>
  <data name="CompositionFailedDefaultExceptionMessage" xml:space="preserve">
    <value>Composition failed.</value>
  </data>
  <data name="ContainerConfiguration_DefaultConventionSet" xml:space="preserve">
    <value>The default conventions for the container configuration have already been set.</value>
  </data>
  <data name="ContractHelpers_TooManyImports" xml:space="preserve">
    <value>Multiple imports have been configured for '{0}'. At most one import can be applied to a single site.</value>
  </data>
  <data name="DiscoveredPart_MultipleImportingConstructorsFound" xml:space="preserve">
    <value>Multiple importing constructors were found on type '{0}'.</value>
  </data>
  <data name="DiscoveredPart_NoImportingConstructorsFound" xml:space="preserve">
    <value>No importing constructor was found on type '{0}'.</value>
  </data>
  <data name="Formatter_ListSeparatorWithSpace1" xml:space="preserve">
    <value>, </value>
  </data>
  <data name="OnImportsSatisfiedFeature_AttributeError" xml:space="preserve">
    <value>The method {0}.{1} has the OnImportsSatisfied attribute applied, but is not a public or internal parameterless instance method returning void.</value>
  </data>
  <data name="TypeInspector_ArgumentMissmatch" xml:space="preserve">
    <value>Exported contract '{0}' of open generic part '{1}' does not match the generic arguments of the class.</value>
  </data>
  <data name="TypeInspector_ContractNotAssignable" xml:space="preserve">
    <value>Exported contract type '{0}' is not assignable from part '{1}'.</value>
  </data>
  <data name="TypeInspector_ExportedContractTypeNotAssignable" xml:space="preserve">
    <value>Exported contract type '{0}' is not assignable from property '{1}' of part '{2}'.</value>
  </data>
  <data name="TypeInspector_ExportNotCompatible" xml:space="preserve">
    <value>The open generic export '{0}' on part '{1}' is not compatible with the contract '{2}'.</value>
  </data>
  <data name="TypeInspector_NoExportNonGenericContract" xml:space="preserve">
    <value>Open generic part '{0}' cannot export non-generic contract '{1}'.</value>
  </data>
  <data name="ArgumentException_EmptyString" xml:space="preserve">
    <value>'{0}' cannot be an empty string ("").</value>
  </data>
  <data name="ArgumentOutOfRange_InvalidEnumInSet" xml:space="preserve">
    <value>The value of argument '{0}' ({1}) is not supported. Allowed values are : '{2}'.</value>
  </data>
  <data name="Argument_ExpressionMustBeNew" xml:space="preserve">
    <value>The value of argument '{0}' is not supported.  The expression must use operator new.</value>
  </data>
  <data name="Argument_ExpressionMustBePropertyMember" xml:space="preserve">
    <value>The value of argument '{0}' is not supported.  The expression must be a property member expression.</value>
  </data>
  <data name="Argument_ExpressionMustBeVoidMethodWithNoArguments" xml:space="preserve">
    <value>The value of argument '{0}' is not supported.  The expression must be a void Method() member expression.</value>
  </data>
  <data name="Registration_ConstructorConventionOverridden" xml:space="preserve">
    <value>A constructor selection convention that would apply to Type '{0}' has been overridden by attributes applied in the source file or by a prior convention.</value>
  </data>
  <data name="Registration_MemberExportConventionOverridden" xml:space="preserve">
    <value>An Export specification convention that would apply to Member '{0}' of type '{1}' has been overridden by attributes applied in the source file or by a prior convention.</value>
  </data>
  <data name="Registration_MemberImportConventionMatchedTwice" xml:space="preserve">
    <value>Only one import specification convention can apply to a single Member. More than one convention specification applies to this Member '{0}' of Type '{1}'.</value>
  </data>
  <data name="Registration_MemberImportConventionOverridden" xml:space="preserve">
    <value>An Import specification convention that would apply to Member '{0}' of type '{1}' has been overridden by attributes applied in the source file or by a prior convention.</value>
  </data>
  <data name="Registration_OnSatisfiedImportNotificationOverridden" xml:space="preserve">
    <value>A OnSatisfiedImports specification convention that would apply to Type '{0}' has been overridden by attributes applied in the source file or by a prior convention.</value>
  </data>
  <data name="Registration_ParameterImportConventionOverridden" xml:space="preserve">
    <value>A ParameterImport specification convention that would apply to Parameter '{0}' of Constructor '{1}' has been overridden by attributes applied in the source file or by a prior convention.</value>
  </data>
  <data name="Registration_PartCreationConventionOverridden" xml:space="preserve">
    <value>A PartCreationPolicy specification convention that would apply to Type '{0}' has been overridden by attributes applied in the source file or by a prior convention.</value>
  </data>
  <data name="Registration_PartMetadataConventionOverridden" xml:space="preserve">
    <value>A PartMetadata specification convention that would apply to Type '{0}' has been overridden by attributes applied in the source file or by a prior convention.</value>
  </data>
  <data name="Registration_TypeExportConventionOverridden" xml:space="preserve">
    <value>An Export specification convention that would apply to type '{0}' has been overridden by attributes applied in the source file or by a prior convention.</value>
  </data>
</root>